let mapleader = " "

set scrolloff=10
set relativenumber
set number
set showmode
set showcmd
set visualbell
set clipboard+=unnamed
set surround
set highlightedyank
set sneak
set easymotion
set notimeout
set incsearch
set exchange
set smartcase
set ignorecase
set hlsearch
set NERDTree
set multiple-cursors
set commentary
set which-key

" Don't use Ex mode, use Q for formatting.
map Q gq

" Search forward/backward for highlighted text
vnoremap // y/\V<C-R>"<CR>
vnoremap ?? y/\V<C-R>"<CR>

map <C-T> :NERDTree<CR>
nnoremap <C-Z> :action ToggleDistractionFreeMode<CR>

inoremap <C-j> <Action>(PopupMenu-selectNext)
inoremap <C-k> <Action>(PopupMenu-selectPrev)

nnoremap <TAB> :action NextTab<CR>
nnoremap <s-TAB> :action PreviousTab<CR>
nnoremap <leader>h :set hlsearch!

nnoremap <leader>ff :action ReformatCode<CR>
nnoremap <leader>rl :action :cursive.repl.actions/load-file<CR>
nnoremap <leader>rn :action :cursive.repl.actions/switch-namespace<CR>
nnoremap <leader>rL :action :cursive.repl.actions/load-file<CR>:action :cursive.repl.action/switch-namespace<CR>

" vim delete and change, with sexps!
map <leader>x :action :cursive.actions.paredit/kill-sexp<CR>
map <leader>d :action :cursive.actions.paredit/kill<CR>
map <leader>c :action :cursive.actions.paredit/kill-sexp<CR>i
map <leader>C :action :cursive.actions.paredit/kill<CR>i

" Since kill copies to system clipboard, it's nice to have easy access to clipboard paste
map <leader>p "+p

" Sexp editing mappings straight from paredit.vim
map <leader>J :action :cursive.actions.paredit/join<CR>
map <leader>O :action :cursive.actions.paredit/split<CR>
map <leader>S :action :cursive.actions.paredit/splice<CR>
map <leader>I :action :cursive.actions.paredit/raise<CR>

" Splice backwards and forwards
map <leader>k :action :cursive.actions.paredit/splice-killing-backwards<CR>
map <leader>j :action :cursive.actions.paredit/splice-killing-forwards<CR>

" Slurp and barf
map <leader>l :action :cursive.actions.paredit/barf-forwards<CR>
map <leader>h :action :cursive.actions.paredit/slurp-forwards<CR>
map <leader>L :action :cursive.actions.paredit/slurp-backwards<CR>
map <leader>H :action :cursive.actions.paredit/barf-backwards<CR>

" leader + wrapping symbol for wrapping
map <leader>( :action :cursive.actions.paredit/wrap-paren<CR>
map <leader>[ :action :cursive.actions.paredit/wrap-square<CR>
map <leader>{ :action :cursive.actions.paredit/wrap-curly<CR>
map <leader>" :action :cursive.actions.paredit/wrap-quotes<CR>

" Force a single "parinference" when in paredit mode and reformat
map <leader>rp :action :cursive.actions.paredit/toggle<CR>:action :cursive.actions.paredit/toggle<CR>kj:action :cursive.actions.paredit/toggle<CR>:action ReformatCode<CR>

" Testing
map <leader>tn :action :cursive.testing.actions/run-single-test<CR>
map <leader>tN :action :cursive.testing.actions/run-ns-tests<CR>

nnoremap <leader>gd <Action>(GoToDeclaration)
nnoremap <leader>gi <Action>(GoToImplementation)

nnoremap <leader>wv :action SplitVertically<CR>
nnoremap <leader>ww :action SplitHorizontally<CR>

nnoremap <leader>wj <c-w>j
nnoremap <leader>wk <c-w>k
nnoremap <leader>wh <c-w>h
nnoremap <leader>wl <c-w>l

nnoremap <leader>wq :action CloseContent<CR>

" Multiple cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
nmap <C-x> <Plug>SkipOccurrence
xmap <C-x> <Plug>SkipOccurrence
nmap <C-p> <Plug>RemoveOccurrence
xmap <C-p> <Plug>RemoveOccurrence
nmap <S-C-n> <Plug>AllWholeOccurrences
xmap <S-C-n> <Plug>AllWholeOccurrences
nmap g<S-C-n> <Plug>AllOccurrences
xmap g<S-C-n> <Plug>AllOccurrences
